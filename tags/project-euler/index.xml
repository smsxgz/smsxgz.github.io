<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Euler on Blog of smsxgz</title>
    <link>https://smsxgz.github.io/tags/project-euler/</link>
    <description>Recent content in Project Euler on Blog of smsxgz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://smsxgz.github.io/tags/project-euler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An elegant result</title>
      <link>https://smsxgz.github.io/post/math/an_elegant_result/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/math/an_elegant_result/</guid>
      <description>&lt;p&gt;Let $A, M$ be two positive integers such that $A &amp;lt; M$.&lt;/p&gt;

&lt;p&gt;Define the sequence $\{c_n\}$ satisfies $0 \le c_n &amp;lt; M$ and $c_n \equiv A n (\mathrm{mod}\ M)$ for $n \ge 1$.&lt;/p&gt;

&lt;p&gt;Moreover let $n_1 = 1$ and if $c_{n_k} &amp;gt; 0$, we define&lt;/p&gt;

&lt;div&gt;$$ n_{k + 1} = \min \{n &gt; n_k: n &gt; n_k, c_n &lt; c_{n_k} \}. $$&lt;/div&gt;

&lt;p&gt;Hence $A n_{k+1}$ is the first positive multiple of $A$ that yields a residual less than $c_{n_k}$.&lt;/p&gt;

&lt;p&gt;Following theorem shows the recurrence relation of the sequence $\{n_k\}$.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;Theorem&lt;/p&gt;
  &lt;p&gt;Suppose that $c_{n_{k+1}} &amp;gt; 0$, then we have&lt;/p&gt;

&lt;div&gt;$$\begin{align} n_{k+2} = \left\lceil \frac{c_{n_k}}{c_{n_{k+1}}} \right\rceil n_{k+1} - n_k. \end{align}$$&lt;/div&gt;

&lt;/div&gt;
&lt;br&gt;
Following proof is based on the proof of &lt;a href=&#34;https://projecteuler.net/thread=700;page=2#349143&#34;&gt;brob26&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sum of the Euler Totient function</title>
      <link>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithms for computing sum of the Euler Totient function.
Our approach completely comes from the approach in the &lt;a href=&#34;https://smsxgz.github.io/post/pe/counting_square_free_numbers/&#34;&gt;previous article&lt;/a&gt; about counting square free numbers.&lt;/p&gt;

&lt;p&gt;The Euler totient function $\varphi(n)$ is defined as the number of positive integers less than $n$ which are co-prime with $n$. Our goal is to compute the sum of all values of the totient function up to a certain $N$&lt;/p&gt;

&lt;div&gt;$$
S(N) = \sum_{n=1}^N \varphi(n).
$$&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Counting square free numbers</title>
      <link>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithm proposed by Jakub Pawlewicz &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt; to count square free numbers not exceeding $n$ efficiently.&lt;/p&gt;

&lt;p&gt;We first introduce a well-known algorithm with time complexity $\tilde{\mathcal{O}}(\sqrt{n})$.
After that, we present a algorithm which is a modified version of first algorithm with time complexity $\tilde{\mathcal{O}}(n^{2/5})$ following from &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;

&lt;!-- and can be viewed as a kind of divide-and-conquer algorithm. --&gt;

&lt;!-- Moreover, this methodology is common in number theory problems in [Project Euler](https://projecteuler.net),
and we show the power of this methodology by two examples at last. --&gt;</description>
    </item>
    
  </channel>
</rss>