<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Euler on Blog of smsxgz</title>
    <link>https://smsxgz.github.io/tags/project-euler/</link>
    <description>Recent content in Project Euler on Blog of smsxgz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://smsxgz.github.io/tags/project-euler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Counting square free numbers</title>
      <link>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithm proposed by Jakub Pawlewicz &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt; to count square free numbers not exceeding $n$ efficiently.&lt;/p&gt;

&lt;p&gt;We first introduce a well-known algorithm with time complexity $\tilde{\mathcal{O}}(\sqrt{n})$.
After that, we present a algorithm which is a modified version of first algorithm with time complexity $\tilde{\mathcal{O}}(n^{2/5})$ following from &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;.
&lt;!-- and can be viewed as a kind of divide-and-conquer algorithm. --&gt;
&lt;!-- Moreover, this methodology is common in number theory problems in [Project Euler](https://projecteuler.net),
and we show the power of this methodology by two examples at last. --&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>