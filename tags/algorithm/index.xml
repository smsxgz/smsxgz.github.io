<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Blog of smsxgz</title>
    <link>https://smsxgz.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on Blog of smsxgz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://smsxgz.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An Euclidean-algorithm type algorithm</title>
      <link>https://smsxgz.github.io/post/math/extended_euclidean_algorithm/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/math/extended_euclidean_algorithm/</guid>
      <description>&lt;p&gt;In this article, we introduce an Euclidean-algorithm type algorithm for solving following problem
&lt;div&gt;$$\begin{align} \min_{x} \{x \ge 0: L \le Ax(\mathrm{mod}\ M) \le R \} ,\end{align}$$&lt;/div&gt;
where $A, M, L, R, x$ are both nonnegative integers such that $0 \le L \le R &amp;lt; M$ and $\text{gcd}(A, M) = 1$.&lt;br /&gt;
We use $n(\mathrm{mod}\ M)$ to denote the integer $n&amp;rsquo;$ such that $n&amp;rsquo; \equiv n (\mathrm{mod}\ M)$ and $0 \le n&amp;rsquo; &amp;lt; M$.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sum of the Euler Totient function</title>
      <link>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithms for computing sum of the Euler Totient function.
Our approach completely comes from the approach in the &lt;a href=&#34;https://smsxgz.github.io/post/pe/counting_square_free_numbers/&#34;&gt;previous article&lt;/a&gt; about counting square free numbers.&lt;/p&gt;

&lt;p&gt;The Euler totient function $\varphi(n)$ is defined as the number of positive integers less than $n$ which are co-prime with $n$. Our goal is to compute the sum of all values of the totient function up to a certain $N$&lt;/p&gt;

&lt;div&gt;$$
S(N) = \sum_{n=1}^N \varphi(n).
$$&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Counting square free numbers</title>
      <link>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithm proposed by Jakub Pawlewicz &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt; to count square free numbers not exceeding $n$ efficiently.&lt;/p&gt;

&lt;p&gt;We first introduce a well-known algorithm with time complexity $\tilde{\mathcal{O}}(\sqrt{n})$.
After that, we present a algorithm which is a modified version of first algorithm with time complexity $\tilde{\mathcal{O}}(n^{2/5})$ following from &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;

&lt;!-- and can be viewed as a kind of divide-and-conquer algorithm. --&gt;

&lt;!-- Moreover, this methodology is common in number theory problems in [Project Euler](https://projecteuler.net),
and we show the power of this methodology by two examples at last. --&gt;</description>
    </item>
    
  </channel>
</rss>