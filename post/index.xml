<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog of smsxgz</title>
    <link>https://smsxgz.github.io/post/</link>
    <description>Recent content in Posts on Blog of smsxgz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://smsxgz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sum of the Euler Totient function</title>
      <link>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</link>
      <pubDate>Mon, 26 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/sum_of_the-euler_totient_function/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithms for computing sum of the Euler Totient function.
Our approach completely comes from the approach in the &lt;a href=&#34;https://smsxgz.github.io/post/pe/counting_square_free_numbers/&#34;&gt;previous article&lt;/a&gt; about counting square free numbers.&lt;/p&gt;

&lt;p&gt;The Euler totient function $\varphi(n)$ is defined as the number of positive integers less than $n$ which are co-prime with $n$. Our goal is to compute the sum of all values of the totient function up to a certain $N$&lt;/p&gt;

&lt;div&gt;$$
S(N) = \sum_{n=1}^N \varphi(n).
$$&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>A Sokoban solver</title>
      <link>https://smsxgz.github.io/post/game_solver/sokoban/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/game_solver/sokoban/</guid>
      <description>&lt;p&gt;A Sokoban solver in Python.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;https://smsxgz.github.io/figure/5.1/out_001.png&#34; alt=&#34;drawing&#34; style=&#34;width:500px;&#34;/&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The codes can be found in &lt;a href=&#34;https://github.com/smsxgz/dailyprogrammer/tree/master/puzzlerama/sokoban&#34;&gt;https://github.com/smsxgz/dailyprogrammer/tree/master/puzzlerama/sokoban&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Proof for Minimax Theorem</title>
      <link>https://smsxgz.github.io/post/math/minimax/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/math/minimax/</guid>
      <description>&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;Von Neumann&amp;#39;s minimax theorem (1928)&lt;/p&gt;
  &lt;p&gt;Let $X$ and $Y$ be compact convex sets. Suppose that $f:X \times Y \rightarrow \mathbb{R}$ is a continuous function that satisfies:&lt;br /&gt;
1. $f(\cdot, y): X \rightarrow \mathbb{R}$ is convex for any fixed $y \in Y$,&lt;br /&gt;
2. $f(x, \cdot): Y \rightarrow \mathbb{R}$ is concave for any fixed $x \in X$.&lt;br /&gt;
Then, we have that&lt;/p&gt;

&lt;div&gt;$$\begin{equation}
\min_{x \in X} \max_{y \in Y} f(x, y) = \max_{y \in Y} \min_{x \in X} f(x, y)
\end{equation}$$&lt;/div&gt;

&lt;/div&gt;
&lt;br&gt;
Following proof is from Hidetoshi Komiya [1].&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Interesting problems from AMM</title>
      <link>https://smsxgz.github.io/post/amm/problems_from_amm/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/amm/problems_from_amm/</guid>
      <description>&lt;p&gt;Following are some interesting problems from &lt;em&gt;The American Mathematical Monthly&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A note for command `convert`</title>
      <link>https://smsxgz.github.io/post/ubuntu/convert_note/</link>
      <pubDate>Sun, 03 Mar 2019 21:31:11 +0800</pubDate>
      
      <guid>https://smsxgz.github.io/post/ubuntu/convert_note/</guid>
      <description>&lt;div class=&#34;admonition failure&#34;&gt;&lt;p class=&#34;admonition-title&#34;&gt;failure&lt;/p&gt;
  &lt;p&gt;&lt;code style=display:block&gt;
$ convert -density 300 example.eps example.png&lt;br /&gt;
convert-im6.q16: not authorized `example.eps&amp;rsquo; @ error/constitute.c/ReadImage/412.&lt;br /&gt;
convert-im6.q16: no images defined `example.png&amp;rsquo; @ error/convert.c/ConvertImageCommand/3258.
&lt;/code&gt;&lt;/p&gt;

&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Euclidean geometric problems (2)</title>
      <link>https://smsxgz.github.io/post/geometry/geometry_2/</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/geometry/geometry_2/</guid>
      <description>&lt;div class=&#39;align-center&#39;&gt;
  &lt;p&gt;&lt;img src=&#34;https://smsxgz.github.io/figure/2.17/problem.png&#34; alt=&#34;img&#34; title=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Counting square free numbers</title>
      <link>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/pe/counting_square_free_numbers/</guid>
      <description>&lt;p&gt;In this article, we introduce an algorithm proposed by Jakub Pawlewicz &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt; to count square free numbers not exceeding $n$ efficiently.&lt;/p&gt;

&lt;p&gt;We first introduce a well-known algorithm with time complexity $\tilde{\mathcal{O}}(\sqrt{n})$.
After that, we present a algorithm which is a modified version of first algorithm with time complexity $\tilde{\mathcal{O}}(n^{2/5})$ following from &lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;

&lt;!-- and can be viewed as a kind of divide-and-conquer algorithm. --&gt;

&lt;!-- Moreover, this methodology is common in number theory problems in [Project Euler](https://projecteuler.net),
and we show the power of this methodology by two examples at last. --&gt;</description>
    </item>
    
    <item>
      <title>Materials for Python learning</title>
      <link>https://smsxgz.github.io/post/python/ref/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/python/ref/</guid>
      <description>&lt;p&gt;My own list of materials for Python learning. Updating.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Euclidean geometric problems (1)</title>
      <link>https://smsxgz.github.io/post/geometry/geometry_1/</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://smsxgz.github.io/post/geometry/geometry_1/</guid>
      <description>&lt;div class=&#39;align-center&#39;&gt;
  &lt;p&gt;&lt;img src=&#34;https://smsxgz.github.io/figure/2.11/problem.png&#34; alt=&#34;img&#34; title=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>